// // export {default} from 'next-auth/middleware' 

// // // export const config = {matcher: ['/secure']}

// // export const config = {matcher: ['/secure/:path*']}

// // import { getToken } from 'next-auth/jwt';
// // import { NextRequest, NextResponse } from 'next/server';

// // export default async function middleware(req) {
// //   // Get the pathname of the request (e.g. /, /protected)
// //   const path = req.nextUrl.pathname;

// //   // If it's the root path, just render it
// //   if (path === '/') {
// //     return NextResponse.next();
// //   }

// //   const session = await getToken({
// //     req,
// //     secret: process.env.NEXTAUTH_SECRET,
// //   });

// //   const isProtected = path.includes('/secure');

// //   if (!session && isProtected) {
// //     return NextResponse.redirect(new URL('/restore', req.url));
// //   } else if (session && (path === '/restore' || path === '/register')) {
// //     return NextResponse.redirect(new URL('/secure', req.url));
// //   }
// //   return NextResponse.next();
// // }








// import { getToken } from 'next-auth/jwt';
// import { NextResponse } from 'next/server';

// export default async function middleware(req) {
//   // Get the pathname of the request (e.g. /, /protected)



//   const path = req.nextUrl.pathname;
//   console.log("path middleware", path);

//   // If it's the root path, just render it
//   if (path === '/') {
//     console.log("regreso del /");
//     return NextResponse.next();
//   }

//   const session = await getToken({
//     req,
//     secret: process.env.NEXTAUTH_SECRET,
//   });

//   console.log('middleware session', session );

//   const isProtected = path.includes('/secure');

//   console.log('middleware isProtected', isProtected );

// //   if (!session && isProtected) {
// //     return NextResponse.redirect(new URL('/restore', req.url));
// //   } else if (session && (path === '/restore' || path === '/register')) {
// //     return NextResponse.redirect(new URL('/secure', req.url));
// //   }
//   return NextResponse.next();
// }


// import { withAuth } from "next-auth/middleware";
// import { NextResponse } from "next/server";

// export default withAuth(
//   // `withAuth` augments your `Request` with the user's token.
//   function middleware(req) {
//     console.log(req.nextauth);
//     if (
//       req.nextUrl.pathname === "/secure" 
//     ) {
//       return new NextResponse("You are not authorized!");
//     }
//   },
//   {
//     callbacks: {
//       authorized: (params) => {
//         let { token } = params;
//         return token;
//       },
//     },
//   }
// );

// export const config = {matcher: ['/secure/:path*']};

// import { NextResponse } from "next/server";

// const legacyPrefixes = ['/secure', '/appi'];
 
// export default async function middleware(req) {
//    const { pathname } = req.nextUrl;
 
//    if (legacyPrefixes.some((prefix) => pathname.startsWith(prefix))) {
//      return NextResponse.next();
//    }
 
  // apply trailing slash handling
  //if (
    //!pathname.endsWith('/') &&
    //!pathname.match(/((?!\.well-known(?:\/.*)?)(?:[^/]+\/)*[^/]+\.\w+)/)
  //) {
  //  req.nextUrl.pathname += '/';
  //  return NextResponse.redirect(req.nextUrl);
  //}
// }

// import { withAuth } from "next-auth/middleware"

// // More on how NextAuth.js middleware works: https://next-auth.js.org/configuration/nextjs#middleware
// export default withAuth({
//   callbacks: {
//     authorized({ req, token }) {
//       // `/admin` requires admin role
//       if (req.nextUrl.pathname === "/admin") {
//         return token?.userRole === "admin"
//       }
//       // `/me` only requires the user to be logged in
//       return !!token
//     },
//   },
// })

// export const config = { matcher: ["/admin", "/secure/:path*"] }

//Esto es mas que suficiente pero no regresa ninguna pagina una vez auttenticado

// export { default } from "next-auth/middleware"

// export const config = { matcher: ["/secure/:path*"] }